T1. Create the configuration files

touch main.tf
touch variables.tf
mkdir modules
cd modules
mkdir instances
cd instances
touch instances.tf
touch outputs.tf
touch variables.tf
cd ..
mkdir storage
cd storage
touch storage.tf
touch outputs.tf
touch variables.tf
cd


variables.tf file- 

variable "region" {
 default = "us-central1"
}

variable "zone" {
 default = "us-central1-a"
}

variable "project_id" {
 default = "<REPLACE PROJECT ID>"
}



main.tf file :

terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "4.53.0"
    }
  }
}

provider "google" {
  project     = var.project_id
  region      = var.region

  zone        = var.zone
}

module "instances" {

  source     = "./modules/instances"

}


Run-  terraform init 

-----------------------------------------------------------------------------------------------------------------------------------------------------------
T2. Import infrastructure

instances.tf.

resource "google_compute_instance" "tf-instance-1" {
  name         = "tf-instance-1"
  machine_type = "n1-standard-1"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2" {
  name         = "tf-instance-2"
  machine_type = "n1-standard-1"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}




Run in cloud shell
terraform import module.instances.google_compute_instance.tf-instance-1 43239006985090423
terraform import module.instances.google_compute_instance.tf-instance-2 74655159709703789

terraform plan
terraform apply

-----------------------------------------------------------------------------------------------------------------------------------------------------------
T3. Configure a remote backend

storage.tf file

resource "google_storage_bucket" "storage-bucket" {
  name          = "<YOUR-BUCKET>"
  location      = "US"
  force_destroy = true
  uniform_bucket_level_access = true
}



main.tf file:


module "storage" {
  source     = "./modules/storage"
}


Run cloud shell : 
terraform init
terraform apply

Next, update the main.tf

terraform {
  backend "gcs" {
    bucket  = "<REPLACE YOUR BUCKET>"
 prefix  = "terraform/state"
  }
  required_providers {
    google = {
      source = "hashicorp/google"
      version = "4.53.0"
    }
  }
}

terraform init

-----------------------------------------------------------------------------------------------------------------------------------------------------------

T4. Modify and update infrastructure


resource "google_compute_instance" "Instance Name" {
  name         = "Instance Name"
  machine_type = "n1-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
 network = "default"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}


Run cloud shell : 
terraform init
terraform apply


-----------------------------------------------------------------------------------------------------------------------------------------------------------

T5. Taint and destroy resources

terraform taint module.instances.google_compute_instance.tf-instance-5

terraform plan
terraform apply


Run it again-
terraform apply



-----------------------------------------------------------------------------------------------------------------------------------------------------------

T6. Use a module from the Registry


module "vpc" {
    source  = "terraform-google-modules/network/google"
    version = "~> 6.0.0"

    project_id   = "PROJECT_ID"
    network_name = "VPC_NAME"
    routing_mode = "GLOBAL"

    subnets = [
        {
            subnet_name           = "subnet-01"
            subnet_ip             = "10.10.10.0/24"
            subnet_region         = "us-central1"
        },
        {
            subnet_name           = "subnet-02"
            subnet_ip             = "10.10.20.0/24"
            subnet_region         = "us-central1"
            subnet_private_access = "true"
            subnet_flow_logs      = "true"
            description           = "This subnet has a description"
        },
    ]
}



run cloud shell :
terraform init
terraform apply


-----------------------------------------------------------------------------------------------------------------------------------------------------------

resource "google_compute_instance" "tf-instance-1"{
  name         = "tf-instance-1"
  machine_type = "n1-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "VPC_NAME"
     subnetwork = "subnet-01"
  }
  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}

resource "google_compute_instance" "tf-instance-2"{
  name         = "tf-instance-2"
  machine_type = "n1-standard-2"
  zone         = var.zone

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-10"
    }
  }

  network_interface {
    network = "VPC_NAME"
     subnetwork = "subnet-02"
  }

  metadata_startup_script = <<-EOT
        #!/bin/bash
    EOT
  allow_stopping_for_update = true
}



module "vpc" {
    source  = "terraform-google-modules/network/google"
    version = "~> 6.0.0"

    project_id   = "PROJECT_ID"
    network_name = "VPC_NAME"
    routing_mode = "GLOBAL"

    subnets = [
        {
            subnet_name           = "subnet-01"
            subnet_ip             = "10.10.10.0/24"
            subnet_region         = "us-central1"
        },
        {
            subnet_name           = "subnet-02"
            subnet_ip             = "10.10.20.0/24"
            subnet_region         = "us-central1"
            subnet_private_access = "true"
            subnet_flow_logs      = "true"
            description           = "This subnet has a description"
        },
    ]
}



run cloud shell :
terraform init
terraform apply


-----------------------------------------------------------------------------------------------------------------------------------------------------------

T6 : Configure a firewall


resource "google_compute_firewall" "tf-firewall"{
  name    = "tf-firewall"
 network = "projects/<PROJECT_ID>/global/networks/VPC_Name"

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_tags = ["web"]
  source_ranges = ["0.0.0.0/0"]
}

run cloud shell : 
terraform init
terraform apply












